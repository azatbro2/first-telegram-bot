# -*- coding: utf-8 -*-
"""
–ê—É–∫—Ü–∏–æ–Ω-–∫–∞—Ä—Ç–∏–Ω—ã –¥–ª—è Telegram (aiogram 3.x), –æ–¥–∏–Ω —Ñ–∞–π–ª.

–§–∏—à–∫–∏:
- –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç 2 –∫–∞—Ä—Ç–∏–Ω—ã: –∫–∞–∫ —Ñ–æ—Ç–æ –ò–õ–ò —á–µ—Ä–µ–∑ WebApp-—Ä–∏—Å–æ–≤–∞–ª–∫—É.
- –£ –ª–æ—Ç–∞ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (100..1000, –∫—Ä–∞—Ç–Ω–æ 10). –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–∏–∂–µ —Ä–µ–∞–ª—å–Ω–æ–π.
- –¢–æ—Ä–≥–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (+100/+200/+300/–ü–∞—Å—Å), 10-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–∞–π–º–µ—Ä, —Å–±—Ä–æ—Å –Ω–∞ —Å—Ç–∞–≤–∫–µ.
- –ü—Ä–æ–¥–∞—ë–º, –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–≤–∫–æ–π –ò–õ–ò –≤—Å–µ –∫—Ä–æ–º–µ –ª–∏–¥–µ—Ä–∞ –Ω–∞–∂–∞–ª–∏ –ü–∞—Å—Å.
- –í —Ñ–∏–Ω–∞–ª–µ –∫–∞–ø–∏—Ç–∞–ª = –¥–µ–Ω—å–≥–∏ + —Å—É–º–º–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤ (–º–∏–Ω—É—Å 1500, –µ—Å–ª–∏ –±—Ä–∞–ª –∫—Ä–µ–¥–∏—Ç).
- –ö–Ω–æ–ø–∫–∞ ¬´–†–µ—Å—Ç–∞—Ä—Ç¬ª —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ. –ü—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ ‚Äî –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞.

–í–∞–∂–Ω–æ –ø—Ä–æ —Ä–∏—Å–æ–≤–∞–ª–∫—É: Telegram WebApp —Ç—Ä–µ–±—É–µ—Ç HTTPS.
–ó–∞–ø—É—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ —Å–µ—Ä–≤–µ—Ä (—ç—Ç–æ—Ç —Ñ–∞–π–ª –µ–≥–æ –ø–æ–¥–Ω–∏–º–µ—Ç –Ω–∞ :8080) –∏ –æ—Ç–∫—Ä–æ–π —Ç—É–Ω–Ω–µ–ª—å:
  ngrok http 8080
–°–∫–æ–ø–∏—Ä—É–π https-url –∏–∑ ngrok –≤ DRAW_WEBAPP_URL –Ω–∏–∂–µ.
"""

import asyncio
import base64
import json
import logging
import random
from io import BytesIO
from typing import Dict, Any, List
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    BufferedInputFile, WebAppInfo,
)

load_dotenv()
# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
API_TOKEN = os.getenv("API_TOKEN")
START_MONEY = 3000
LOAN_PLUS = 1000
LOAN_PAYBACK = 1500

MAX_ARTS_PER_PLAYER = 2

# —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ—Ç–∞
REAL_MIN = 100
REAL_MAX = 3500
# —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —Ä–µ–∞–ª—å–Ω–æ–π
START_OFFSETS = [100, 200, 300]  # –Ω–∞—Å–∫–æ–ª—å–∫–æ –Ω–∏–∂–µ —Ä–µ–∞–ª—å–Ω–æ–π
# —Ç–∞–π–º–µ—Ä —Ç–æ—Ä–≥–æ–≤ (—Å–µ–∫)
BID_TIMER_SEC = 10

# URL —Ä–∏—Å–æ–≤–∞–ª–∫–∏ (HTTPS). –ü—Ä–∏–º–µ—Ä: "https://<—Ç–≤–æ–π_ngrok>.ngrok.io/draw"
DRAW_WEBAPP_URL = os.getenv("DRAW_WEBAPP_URL")  

# ====== –õ–û–ì–ò ======
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("auction")

bot = Bot(API_TOKEN, parse_mode=None)
dp = Dispatcher()

# ====== –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´ ======
class Player:
    def __init__(self, uid: int, name: str, username: str | None):
        self.id = uid
        self.name = name
        self.username = username
        self.money = START_MONEY
        self.loan = False
        self.arts_created = 0  # —Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω –¥–æ–±–∞–≤–∏–ª (–º–∞–∫—Å 2)

class Lot:
    def __init__(self, lot_id: int, author_id: int, title: str, file_id: str, real_value: int, start_price: int):
        self.id = lot_id
        self.author_id = author_id
        self.title = title
        self.file_id = file_id
        self.real_value = real_value
        self.start_price = start_price
        self.sold_to: int | None = None
        self.sold_price: int = 0

players: Dict[int, Player] = {}   # user_id -> Player
lots: List[Lot] = []              # –≤—Å–µ –ª–æ—Ç—ã
queue: List[int] = []             # –æ—á–µ—Ä–µ–¥—å id –ª–æ—Ç–æ–≤

# —Ç–µ–∫—É—â–µ–µ —Ç–æ—Ä–≥–∏
current: Dict[str, Any] = {
    "chat_id": None,
    "lot": None,           # Lot
    "active_ids": [],      # –∫—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞–≤–∏—Ç—å (–Ω–µ –∞–≤—Ç–æ—Ä)
    "price": 0,
    "leader": None,        # user_id
    "passed": set(),       # user_id, –ø–∞—Å–∞–Ω—É–ª–∏ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
    "photo_msg_id": None,  # id —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –ª–æ—Ç–∞
    "timer_msg_id": None,  # id —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–µ—Ä–æ–º
    "timer_task": None,    # asyncio.Task —Ç–∞–π–º–µ—Ä–∞
    "auction_running": False,
}

# ====== –£–¢–ò–õ–ò–¢–´ ======
def round10(x: int) -> int:
    """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑ –¥–æ –¥–µ—Å—è—Ç–∫–∏: 234 -> 230."""
    return (x // 10) * 10

def make_bid_keyboard(price: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"+100 ‚Üí {price+100}", callback_data=f"bid:{price+100}"),
            InlineKeyboardButton(text=f"+200 ‚Üí {price+200}", callback_data=f"bid:{price+200}"),
            InlineKeyboardButton(text=f"+300 ‚Üí {price+300}", callback_data=f"bid:{price+300}"),
        ],
        [InlineKeyboardButton(text="üö´ –ü–∞—Å—Å", callback_data="pass")]
    ])

def restart_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîÑ –†–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã")]],
        resize_keyboard=True
    )

def draw_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="üñåÔ∏è –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω—É", web_app=WebAppInfo(url=DRAW_WEBAPP_URL))
        ]],
        resize_keyboard=True
    )

def ensure_player(u: types.User) -> Player:
    p = players.get(u.id)
    if not p:
        p = Player(u.id, u.first_name or str(u.id), u.username)
        players[u.id] = p
    return p

def everyone_ready() -> bool:
    if not players:
        return False
    return all(p.arts_created >= MAX_ARTS_PER_PLAYER for p in players.values())

def compute_capital(p: Player) -> int:
    value_sum = sum(l.real_value for l in lots if l.sold_to == p.id)
    cap = p.money + value_sum
    if p.loan:
        cap -= LOAN_PAYBACK
    return cap

# ====== –ö–û–ú–ê–ù–î–´ ======
@dp.message(Command("start"))
async def cmd_start(m: types.Message):
    ensure_player(m.from_user)
    await m.answer(
        "üé® –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞—É–∫—Ü–∏–æ–Ω –∫–∞—Ä—Ç–∏–Ω.\n"
        "1) –í—Å—Ç—É–ø–∞–π: /join\n"
        "2) –î–æ–±–∞–≤—å 2 –∫–∞—Ä—Ç–∏–Ω—ã ‚Äî –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –ò–õ–ò –∂–º–∏ ¬´üñåÔ∏è –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω—É¬ª –Ω–∏–∂–µ.\n"
        "–ö–æ–≥–¥–∞ –≤—Å–µ –¥–æ–±–∞–≤—è—Ç –ø–æ 2 ‚Äî –∞—É–∫—Ü–∏–æ–Ω —Å—Ç–∞—Ä—Ç—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=draw_kb()
    )

@dp.message(Command("join"))
async def cmd_join(m: types.Message):
    p = ensure_player(m.from_user)
    await m.answer(f"üë§ {p.name} –≤ –∏–≥—Ä–µ! –ë–∞–ª–∞–Ω—Å: {p.money} üí∞")

@dp.message(Command("loan"))
async def cmd_loan(m: types.Message):
    p = ensure_player(m.from_user)
    if p.loan:
        await m.answer("üè¶ –¢—ã —É–∂–µ –±—Ä–∞–ª –∫—Ä–µ–¥–∏—Ç.")
        return
    p.loan = True
    p.money += LOAN_PLUS
    await m.answer(f"üè¶ –ö—Ä–µ–¥–∏—Ç +{LOAN_PLUS}. –í –∫–æ–Ω—Ü–µ —Å–ø–∏—à–µ—Ç—Å—è {LOAN_PAYBACK}.")

@dp.message(Command("status"))
async def cmd_status(m: types.Message):
    p = ensure_player(m.from_user)
    own = [l.id for l in lots if l.sold_to == p.id]
    await m.answer(
        f"üë§ {p.name}\n–ë–∞–ª–∞–Ω—Å: {p.money} üí∞\n–ö—Ä–µ–¥–∏—Ç: {'–¥–∞' if p.loan else '–Ω–µ—Ç'}\n"
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–∏–Ω: {p.arts_created}/{MAX_ARTS_PER_PLAYER}\n–ö—É–ø–ª–µ–Ω–æ: {own}"
    )

@dp.message(F.text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã")
async def btn_restart(m: types.Message):
    await restart_game(m.chat.id)

@dp.message(Command("restart"))
async def cmd_restart(m: types.Message):
    await restart_game(m.chat.id)

async def restart_game(chat_id: int):
    # –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ —à—ë–ª
    t = current.get("timer_task")
    if t and not t.done():
        t.cancel()
        with contextlib.suppress(Exception):
            await t
    # —á–∏—Å—Ç–∏–º –≤—Å—ë
    players.clear()
    lots.clear()
    queue.clear()
    for k in list(current.keys()):
        current[k] = None
    current.update({"auction_running": False})
    await bot.send_message(chat_id, "‚ôªÔ∏è –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞. /join —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=ReplyKeyboardRemove())
# –ö–æ–º–∞–Ω–¥–∞ /draw
@dp.message(Command("draw"))
async def draw_cmd(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(
                text="üé® –û—Ç–∫—Ä—ã—Ç—å —Ä–∏—Å–æ–≤–∞–ª–∫—É",
                web_app=types.WebAppInfo(url="https://azatbro2.github.io/azat/")
            )]
        ]
    )
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∏—Å–æ–≤–∞—Ç—å:", reply_markup=keyboard)

# ====== –ü–†–ò–Å–ú –§–û–¢–û –ö–ê–†–¢–ò–ù ======
@dp.message(F.photo)
async def on_photo(m: types.Message):
    p = ensure_player(m.from_user)
    if p.arts_created >= MAX_ARTS_PER_PLAYER:
        await m.answer("‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ 2 –∫–∞—Ä—Ç–∏–Ω—ã.")
        return

    # –±–µ—Ä—ë–º file_id –ø–æ—Å–ª–µ–¥–Ω–µ–π (–∫—Ä—É–ø–Ω–æ–π) –∫–æ–ø–∏–∏
    file_id = m.photo[-1].file_id

    # —Ä–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è (–Ω–∏–∂–µ —Ä–µ–∞–ª—å–Ω–æ–π)
    real = round10(random.randint(REAL_MIN, REAL_MAX))
    start = max(REAL_MIN, real - random.choice(START_OFFSETS))
    if start >= real:
        start = max(REAL_MIN, real - 100)
    start = round10(start)

    lot = Lot(len(lots)+1, p.id, f"–ö–∞—Ä—Ç–∏–Ω–∞ #{len(lots)+1}", file_id, real, start)
    lots.append(lot)
    p.arts_created += 1

    await m.answer(f"‚úÖ –ö–∞—Ä—Ç–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. (—Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∫—Ä—ã—Ç–∞, —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {start})")


    # –∫–æ–≥–¥–∞ –≤—Å–µ –ø–æ 2 ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω
    if everyone_ready() and not current.get("auction_running"):
        await m.answer("üîî –í—Å–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ 2 –∫–∞—Ä—Ç–∏–Ω—ã. –ß–µ—Ä–µ–∑ 2 —Å–µ–∫ –Ω–∞—á–Ω—ë–º‚Ä¶", reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(2)
        await start_auction(m.chat.id)

# ====== –ü–†–ò–Å–ú –î–ê–ù–ù–´–• –ò–ó WEB APP (—Ä–∏—Å–æ–≤–∞–ª–∫–∞) ======
@dp.message(F.web_app_data)
async def on_web_app_data(m: types.Message):
    """
    WebApp —à–ª—ë—Ç JSON —Å—Ç—Ä–æ–∫–æ–π: {"title": "...", "png":"data:image/png;base64,...."}
    """
    p = ensure_player(m.from_user)
    if p.arts_created >= MAX_ARTS_PER_PLAYER:
        await m.answer("‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ 2 –∫–∞—Ä—Ç–∏–Ω—ã.")
        return

    try:
        data = json.loads(m.web_app_data.data)
        title = (data.get("title") or "").strip() or f"–ö–∞—Ä—Ç–∏–Ω–∞ #{len(lots)+1}"
        b64 = data.get("png", "")
        if not b64.startswith("data:image/png;base64,"):
            raise ValueError("wrong data url")
        raw = base64.b64decode(b64.split(",", 1)[1])
    except Exception:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å —Ä–∏—Å—É–Ω–æ–∫ üòï –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    # –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ Telegram, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å file_id
    img = BufferedInputFile(raw, filename="art.png")
    msg = await bot.send_photo(m.chat.id, img, caption="üñåÔ∏è –†–∏—Å—É–Ω–æ–∫ –ø–æ–ª—É—á–µ–Ω.")
    file_id = msg.photo[-1].file_id
    # —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–ª–∞–º–ª—è—Ç—å —á–∞—Ç ‚Äî –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await bot.delete_message(m.chat.id, msg.message_id)
    except Exception:
        pass

    # —Ü–µ–Ω—ã
    real = round10(random.randint(REAL_MIN, REAL_MAX))
    start = max(REAL_MIN, real - random.choice(START_OFFSETS))
    if start >= real:
        start = max(REAL_MIN, real - 100)
    start = round10(start)

    lot = Lot(len(lots)+1, p.id, title, file_id, real, start)
    lots.append(lot)
    p.arts_created += 1
    await m.answer(f"‚úÖ –†–∏—Å—É–Ω–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ ¬´{title}¬ª. –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {start}")

    if everyone_ready() and not current.get("auction_running"):
        await m.answer("üîî –í—Å–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ 2 –∫–∞—Ä—Ç–∏–Ω—ã. –ß–µ—Ä–µ–∑ 2 —Å–µ–∫ –Ω–∞—á–Ω—ë–º‚Ä¶", reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(2)
        await start_auction(m.chat.id)

# ====== –°–¢–ê–†–¢ –ê–£–ö–¶–ò–û–ù–ê ======
async def start_auction(chat_id: int):
    current["auction_running"] = True
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å –∏ –º–µ—à–∞–µ–º
    queue[:] = [l.id for l in lots]
    random.shuffle(queue)
    await next_lot(chat_id)

async def next_lot(chat_id: int):
    # –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä
    t = current.get("timer_task")
    if t and not t.done():
        t.cancel()
        with contextlib.suppress(Exception):
            await t

    if not queue:
        current["auction_running"] = False
        await show_results(chat_id)
        return

    lot_id = queue.pop(0)
    lot = next(l for l in lots if l.id == lot_id)

    active_ids = [pid for pid in players if pid != lot.author_id]
    if not active_ids:
        # –Ω–∏–∫–æ–º—É –ø—Ä–æ–¥–∞–≤–∞—Ç—å
        lot.sold_to = lot.author_id
        lot.sold_price = 0
        await bot.send_message(chat_id, f"‚ö†Ô∏è –õ–æ—Ç ‚Ññ{lot.id} –æ—Å—Ç–∞–ª—Å—è —É –∞–≤—Ç–æ—Ä–∞ (–Ω–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π).")
        await next_lot(chat_id)
        return

    current.update({
        "chat_id": chat_id,
        "lot": lot,
        "active_ids": active_ids,
        "price": lot.start_price,
        "leader": None,
        "passed": set(),
        "photo_msg_id": None,
        "timer_msg_id": None,
        "timer_task": None,
    })

    # –ø—É–±–ª–∏–∫—É–µ–º –ª–æ—Ç (–±–µ–∑ –∞–≤—Ç–æ—Ä–∞/–Ω–∞–∑–≤–∞–Ω–∏—è)
    caption = f"üé® –õ–û–¢ ‚Ññ{lot.id}\nüí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {lot.start_price}\n–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ ¬´–ü–∞—Å—Å¬ª."
    msg = await bot.send_photo(chat_id, lot.file_id, caption=caption, reply_markup=make_bid_keyboard(lot.start_price))
    current["photo_msg_id"] = msg.message_id

    # –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ç–∞–π–º–µ—Ä
    tmsg = await bot.send_message(chat_id, f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {BID_TIMER_SEC} —Å–µ–∫.")
    current["timer_msg_id"] = tmsg.message_id
    current["timer_task"] = asyncio.create_task(run_timer())

async def run_timer():
    """–û—Ç–¥–µ–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä: —Ç–∏–∫–∞–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ª–æ—Ç –ø—Ä–∏ –Ω—É–ª–µ."""
    try:
        sec = BID_TIMER_SEC
        while sec > 0:
            await asyncio.sleep(1)
            sec -= 1
            # –º–æ–∂–µ—Ç —É–∂–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not current["lot"]:
                return
            try:
                await bot.edit_message_text(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {sec} —Å–µ–∫.", chat_id=current["chat_id"], message_id=current["timer_msg_id"])
            except Exception:
                pass

        # —Ç–∞–π–º–µ—Ä –∏—Å—Ç—ë–∫
        if current["leader"] is not None:
            await finalize_sale(reason="‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ")
        else:
            # –Ω–∏–∫—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫–∏
            lot: Lot = current["lot"]
            lot.sold_to = lot.author_id
            lot.sold_price = 0
            await bot.edit_message_caption(
                chat_id=current["chat_id"], message_id=current["photo_msg_id"],
                caption=f"üé® –õ–û–¢ ‚Ññ{lot.id}\n‚ùå –ù–∏–∫—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É. –õ–æ—Ç –æ—Å—Ç–∞–ª—Å—è —É –∞–≤—Ç–æ—Ä–∞.",
                reply_markup=None
            )
            await cleanup_after_lot()
            await next_lot(current["chat_id"])
    except asyncio.CancelledError:
        # —Å–±—Ä–æ—Å–∏–ª–∏ —Ç–∞–π–º–µ—Ä (–∫—Ç–æ-—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª)
        return

async def cleanup_after_lot():
    # —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä-—Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if current["timer_msg_id"]:
            await bot.delete_message(current["chat_id"], current["timer_msg_id"])
    except Exception:
        pass
    current["timer_msg_id"] = None
    # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–±—ã—Ç—å —Ç–∞–π–º–µ—Ä
    t = current.get("timer_task")
    if t and not t.done():
        t.cancel()
        with contextlib.suppress(Exception):
            await t
    current["timer_task"] = None
    # –æ–±–Ω—É–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ª–æ—Ç–∞
    current["lot"] = None
    current["leader"] = None
    current["passed"] = set()
    current["active_ids"] = []

async def finalize_sale(reason: str):
    lot: Lot = current["lot"]
    leader_id = current["leader"]
    price = current["price"]
    buyer = players[leader_id]
    # —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
    buyer.money -= price
    lot.sold_to = leader_id
    lot.sold_price = price

    try:
        await bot.edit_message_caption(
            chat_id=current["chat_id"], message_id=current["photo_msg_id"],
            caption=f"‚úÖ {reason} ‚Äî –õ–û–¢ ‚Ññ{lot.id} –ø—Ä–æ–¥–∞–Ω {buyer.name} –∑–∞ {price} üí∞\n"
                    f"üíé –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∞ –≤ —Ñ–∏–Ω–∞–ª–µ.",
            reply_markup=None
        )
    except Exception:
        pass

    await cleanup_after_lot()
    await asyncio.sleep(1)
    await next_lot(current["chat_id"])

# ====== –ö–û–õ–ë–≠–ö–ò –°–¢–ê–í–û–ö / –ü–ê–°–° ======
@dp.callback_query(F.data.startswith("bid:"))
async def on_bid(c: types.CallbackQuery):
    if not current["lot"]:
        await c.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ—Ç–∞.", show_alert=True)
        return
    uid = c.from_user.id
    if uid not in current["active_ids"]:
        await c.answer("–ê–≤—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Å–≤–æ–π –ª–æ—Ç.", show_alert=True)
        return

    new_price = int(c.data.split(":")[1])
    # —Ü–µ–Ω—ã –≤—Å–µ–≥–¥–∞ ¬´–∫—Ä—É–≥–ª—ã–µ¬ª
    new_price = round10(new_price)

    p = players[uid]
    if p.money < new_price:
        await c.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç üí∏", show_alert=True)
        return
    if new_price <= current["price"]:
        await c.answer("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π.", show_alert=True)
        return

    # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    current["price"] = new_price
    current["leader"] = uid
    current["passed"] = set()  # –≤—Å–µ ¬´–ü–∞—Å—Å—ã¬ª –æ–±–Ω—É–ª—è–µ–º

    # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –ª–æ—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏
    try:
        await bot.edit_message_caption(
            chat_id=current["chat_id"], message_id=current["photo_msg_id"],
            caption=f"üé® –õ–û–¢ ‚Ññ{current['lot'].id}\nüìà –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {current['price']} (–æ—Ç {p.name})",
            reply_markup=make_bid_keyboard(current["price"])
        )
    except Exception:
        pass

    # —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
    t = current.get("timer_task")
    if t and not t.done():
        t.cancel()
        with contextlib.suppress(Exception):
            await t
    # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–Ω–æ–≤–æ –Ω–∞ 10 —Å–µ–∫
    tm = await bot.edit_message_text(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {BID_TIMER_SEC} —Å–µ–∫.", chat_id=current["chat_id"], message_id=current["timer_msg_id"])
    current["timer_msg_id"] = tm.message_id
    current["timer_task"] = asyncio.create_task(run_timer())

    await c.answer("–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")

@dp.callback_query(F.data == "pass")
async def on_pass(c: types.CallbackQuery):
    if not current["lot"]:
        await c.answer()
        return
    uid = c.from_user.id
    # —É—á–∏—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ –∞–≤—Ç–æ—Ä–∞)
    if uid not in current["active_ids"]:
        await c.answer()
        return

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Å—Å
    current["passed"].add(uid)
    await c.answer("üö´ –ü–∞—Å—Å")

    # –µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏–¥–µ—Ä –∏ –í–°–ï –ö–†–û–ú–ï –ù–ï–ì–û –ø–∞—Å—Å–∞–Ω—É–ª–∏ ‚Äî –ø—Ä–æ–¥–∞—ë–º —Å—Ä–∞–∑—É
    if current["leader"] is not None:
        others = set(current["active_ids"]) - {current["leader"]}
        if others.issubset(current["passed"]) and others:
            await finalize_sale(reason="üõé –í—Å–µ –ø–∞—Å—Å")
            return

    # –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ —Å—Ç–∞–≤–∏–ª –∏ –≤—Å–µ –ø–∞—Å—Å–∞–Ω—É–ª–∏ ‚Äî –ª–æ—Ç –∫ –∞–≤—Ç–æ—Ä—É
    if current["leader"] is None and set(current["active_ids"]).issubset(current["passed"]):
        lot: Lot = current["lot"]
        lot.sold_to = lot.author_id
        lot.sold_price = 0
        try:
            await bot.edit_message_caption(
                chat_id=current["chat_id"], message_id=current["photo_msg_id"],
                caption=f"üé® –õ–û–¢ ‚Ññ{lot.id}\n‚ùå –í—Å–µ –ø–∞—Å—Å. –õ–æ—Ç –æ—Å—Ç–∞–ª—Å—è —É –∞–≤—Ç–æ—Ä–∞.",
                reply_markup=None
            )
        except Exception:
            pass
        await cleanup_after_lot()
        await next_lot(current["chat_id"])

# ====== –§–ò–ù–ê–õ ======
async def show_results(chat_id: int):
    # —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤/–Ω–∞–∑–≤–∞–Ω–∏—è/—Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    lines = ["üèÅ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!\n"]
    for l in lots:
        author = players[l.author_id].name
        if l.sold_to:
            buyer = players[l.sold_to].name
            lines.append(f"üé® –õ–æ—Ç ‚Ññ{l.id} ‚Äî ¬´{l.title}¬ª (–∞–≤—Ç–æ—Ä: {author})\n"
                         f"   üè∑ –ü—Ä–æ–¥–∞–Ω {buyer} –∑–∞ {l.sold_price} üí∞ | üíé –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {l.real_value}\n")
        else:
            lines.append(f"üé® –õ–æ—Ç ‚Ññ{l.id} ‚Äî ¬´{l.title}¬ª (–∞–≤—Ç–æ—Ä: {author})\n"
                         f"   ‚ùå –ù–µ –ø—Ä–æ–¥–∞–Ω | üíé –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {l.real_value}\n")

    # —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    rating = []
    for p in players.values():
        cap = compute_capital(p)
        value_sum = sum(l.real_value for l in lots if l.sold_to == p.id)
        rating.append((cap, p, value_sum))
    rating.sort(key=lambda x: x[0], reverse=True)

    lines.append("üèÜ –ò—Ç–æ–≥–∏:")
    for i, (cap, p, value_sum) in enumerate(rating, start=1):
        lines.append(f"{i}. {p.name} ‚Äî –∫–∞–ø–∏—Ç–∞–ª: {cap} üí∞ (–±–∞–ª–∞–Ω—Å: {p.money}, –∫–∞—Ä—Ç–∏–Ω—ã: {value_sum}, –∫—Ä–µ–¥–∏—Ç: {'–¥–∞' if p.loan else '–Ω–µ—Ç'})")

    await bot.send_message(chat_id, "\n".join(lines), reply_markup=restart_kb())

# ====== –ü–†–û–°–¢–û–ô –í–ï–ë-–°–ï–†–í–ï–† –° –†–ò–°–û–í–ê–õ–ö–û–ô ======
# (–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram –¥–æ–±–∞–≤—å HTTPS —á–µ—Ä–µ–∑ ngrok –∏ –ø—Ä–æ–ø–∏—à–∏ DRAW_WEBAPP_URL)
import contextlib
from aiohttp import web

DRAW_HTML = """<!doctype html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–†–∏—Å–æ–≤–∞–ª–∫–∞</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background: #1e1e1e;
            color: white;
            font-family: Arial, sans-serif;
        }
        canvas {
            border: 2px solid white;
            background: black;
            cursor: crosshair;
        }
        .controls {
            margin-top: 10px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            justify-content: center;
        }
        button {
            padding: 8px 15px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
        }
        .clear { background: crimson; color: white; }
        .save { background: limegreen; color: black; }
        .color-picker, .size-picker {
            padding: 5px;
        }
    </style>
</head>
<body>
    <h1>üé® –†–∏—Å–æ–≤–∞–ª–∫–∞</h1>
    <canvas id="canvas" width="800" height="500"></canvas>
    <div class="controls">
        <input type="color" id="color" class="color-picker" value="#ffffff">
        <input type="range" id="size" class="size-picker" min="1" max="20" value="4">
        <button class="clear" onclick="clearCanvas()">–û—á–∏—Å—Ç–∏—Ç—å</button>
        <button class="save" onclick="saveCanvas()">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    </div>

    <script>
        const canvas = document.getElementById("canvas");
        const ctx = canvas.getContext("2d");
        let painting = false;
        let color = document.getElementById("color").value;
        let size = document.getElementById("size").value;

        document.getElementById("color").addEventListener("change", (e) => {
            color = e.target.value;
        });

        document.getElementById("size").addEventListener("input", (e) => {
            size = e.target.value;
        });

        function startPosition(e) {
            painting = true;
            draw(e);
        }
        function endPosition() {
            painting = false;
            ctx.beginPath();
        }
        function draw(e) {
            if (!painting) return;
            ctx.lineWidth = size;
            ctx.lineCap = "round";
            ctx.strokeStyle = color;

            const rect = canvas.getBoundingClientRect();
            ctx.lineTo(e.clientX - rect.left, e.clientY - rect.top);
            ctx.stroke();
            ctx.beginPath();
            ctx.moveTo(e.clientX - rect.left, e.clientY - rect.top);
        }

        function clearCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function saveCanvas() {
            const link = document.createElement('a');
            link.download = 'drawing.png';
            link.href = canvas.toDataURL();
            link.click();
        }

        canvas.addEventListener("mousedown", startPosition);
        canvas.addEventListener("mouseup", endPosition);
        canvas.addEventListener("mousemove", draw);
    </script>
</body>
</html>
"""

async def handle_draw(request: web.Request):
    return web.Response(text=DRAW_HTML, content_type="text/html; charset=utf-8")

async def run_web_server():
    app = web.Application()
    app.router.add_get("/draw", handle_draw)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    log.info("WebApp served at https://azatbro2.github.io/azat/  (–∏—Å–ø–æ–ª—å–∑—É–π ngrok –¥–ª—è HTTPS)")

# ====== –ó–ê–ü–£–°–ö ======
async def main():
    await run_web_server()         # –ø–æ–¥–Ω–∏–º–µ–º —Ä–∏—Å–æ–≤–∞–ª–∫—É
    await dp.start_polling(bot)    # –∑–∞–ø—É—Å—Ç–∏–º –±–æ—Ç–∞ (long polling)

if __name__ == "__main__":
    import contextlib
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("stopped")
